{"version":3,"sources":["BoardCell.tsx","game/patterns.ts","GameControls.tsx","Board.tsx","game/Cell.ts","game/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BoardCell","props","style","left","column","top","row","className","data-column","data-row","PatternStyle","PULSAR_SECTOR","PENTA_DECA_HALF","dimensions","pattern","rows","columns","forEach","element","move","index","colums","map","cell","flipRight","flipDown","GameState","patterns","beehive","type","StillLife","block","boat","loaf","tub","beacon","Oscillator","blinker","pulsar","pentaDecathlon","name","toad","glider","Spaceship","heavyweigt","lightweigt","middleweigt","GameControls","isSelecting","state","Selecting","isInitial","Initial","playing","Playing","playLabel","Flex","justify","height","direction","ButtonGroup","mt","mb","Tooltip","hasArrow","aria-label","label","placement","zIndex","IconButton","icon","MdPause","MdPlayArrow","isDisabled","hasAliveCells","onClick","changeState","variantColor","MdTouchApp","ml","MdRefresh","random","MdClear","clear","FormLabel","htmlFor","NumberInput","id","max","min","onChange","val","changeInterval","Number","step","value","interval","w","FormControl","Select","placeholder","e","target","selectPattern","Object","entries","key","Board","targetRef","useRef","select","setDimensions","handleClick","useCallback","x","nativeEvent","offsetX","y","offsetY","Math","floor","useLayoutEffect","current","width","offsetWidth","offsetHeight","columnBorders","rowBorders","col","push","ref","alive","CellState","Cell","_state","_next","this","Game","chanceToLive","initGrid","_grid","filter","Alive","next","Dead","cycle","randomState","getCell","startRow","startColumn","calcNext","aliveNeighbors","neighbor","length","isValidIndex","init","i","initEmpty","Array","customTheme","theme","colors","brand","900","800","700","App","useState","setAlive","setInterval","setPattern","setState","game","initGame","useEffect","intervalId","window","nextState","clearInterval","ThemeProvider","CSSReset","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.303efa77.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport const CELL_WIDTH = 20;\nexport interface IBoardCellProps {\n  column: number;\n  row: number;\n}\n\nexport default function BoardCell (props: IBoardCellProps) {\n  const style: React.CSSProperties = {\n    left: 11 + props.column * CELL_WIDTH,\n    top: 1 + props.row * CELL_WIDTH,\n  }\n  return (\n    <div className=\"cell alive\" data-column={props.column} data-row={props.row} style={style}/>\n  );\n}\n","export enum PatternStyle {\n  StillLife = \"Still life\",\n  Oscillator = \"Oscillator\",\n  Spaceship = \"Spaceship\",\n}\n\nexport type PatternIndex = Array<[number, number]>;\nexport interface GamePattern {\n  name?: string;\n  pattern: PatternIndex;\n  type: PatternStyle;\n}\n\nexport interface GamePatterns {\n  [key: string]: GamePattern;\n}\n\nconst PULSAR_SECTOR: PatternIndex = [\n  [0, 2], [0, 3], [0, 4],\n  [2, 0], [2, 5],\n  [3, 0], [3, 5],\n  [4, 0], [4, 5],\n  [5, 2], [5, 3], [5, 4],\n];\n\nconst PENTA_DECA_HALF: PatternIndex = [\n  [0, 2],\n  [1, 1], [1, 2], [1, 3],\n  [2, 0], [2, 1], [2, 2], [2, 3], [2, 4],\n];\n\nexport function dimensions(pattern: PatternIndex) {\n  let rows = -1;\n  let columns = -1;\n  pattern.forEach(element => {\n    if (element[0] > rows) {\n      rows = element[0];\n    }\n    if (element[1] > columns) {\n      columns = element[1];\n    }\n  });\n\n  return [rows, columns];\n}\n\nfunction move(index: PatternIndex, rows: number, colums: number): PatternIndex {\n  return index.map(cell => [cell[0] + rows, cell[1] + colums]);\n}\n\nfunction flipRight(index: PatternIndex): PatternIndex {\n  const columns = dimensions(index)[1];\n  return index.map(cell => [cell[0], columns - cell[1]]);\n}\n\nfunction flipDown(index: PatternIndex): PatternIndex {\n  const rows = dimensions(index)[0];\n  return index.map(cell => [rows - cell[0], cell[1]]);\n}\n\nexport const patterns: GamePatterns = {\n  beehive: {\n    pattern: [[0, 1], [0, 2], [1, 0], [1, 3], [2, 1], [2, 2]],\n    type: PatternStyle.StillLife\n  },\n  block: {\n    pattern: [[0, 0], [0, 1], [1, 0], [1, 1]],\n    type: PatternStyle.StillLife\n  },\n  boat: {\n    pattern: [[0, 0], [0, 1], [1, 0], [1, 2], [2, 1]],\n    type: PatternStyle.StillLife\n  },\n  loaf: {\n    pattern: [[0, 1], [0, 2], [1, 0], [1, 3], [2, 1], [2, 3], [3, 2]],\n    type: PatternStyle.StillLife\n  },\n  tub: {\n    pattern: [[0, 1], [1, 0], [1, 2], [2, 1]],\n    type: PatternStyle.StillLife\n  },\n  beacon: {\n    pattern: [\n      [0, 0], [0, 1], [1, 0], [1, 1],\n      [2, 2], [2, 3], [3, 2], [3, 3]\n    ],\n    type: PatternStyle.Oscillator\n  },\n  blinker: {\n    pattern: [[0, 0], [0, 1], [0, 2]],\n    type: PatternStyle.Oscillator\n  },\n  pulsar: {\n    pattern: [\n      ...PULSAR_SECTOR,\n      ...move(flipDown(PULSAR_SECTOR), 7, 0),\n      ...move(flipRight(PULSAR_SECTOR), 0, 7),\n      ...move(flipRight(flipDown(PULSAR_SECTOR)), 7, 7),\n    ],\n    type: PatternStyle.Oscillator\n  },\n  pentaDecathlon: {\n    name: \"penta-decathlon\",\n    pattern: [\n      ...PENTA_DECA_HALF,\n      ...move(flipDown(PENTA_DECA_HALF), 9, 0),\n    ],\n    type: PatternStyle.Oscillator\n  },\n  toad: {\n    pattern: [[0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2]],\n    type: PatternStyle.Oscillator\n  },\n  glider: {\n    pattern: [\n      [0, 1],\n      [1, 2],\n      [2, 0], [2, 1], [2, 2]\n    ],\n    type: PatternStyle.Spaceship\n  },\n  heavyweigt: {\n    pattern: [\n      [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6],\n      [1, 0], [1, 6],\n      [2, 6],\n      [3, 0], [3, 5],\n      [4, 2], [4, 3],\n    ],\n    type: PatternStyle.Spaceship\n  },\n  lightweigt: {\n    pattern: [\n      [0, 0], [0, 3],\n      [1, 4],\n      [2, 0], [2, 4],\n      [3, 1], [3, 2], [3, 3], [3, 4],\n    ],\n    type: PatternStyle.Spaceship\n  },\n  middleweigt: {\n    pattern: [\n      [0, 2],\n      [1, 0], [1, 4],\n      [2, 5],\n      [3, 0], [3, 5],\n      [4, 1], [4, 2], [4, 3], [4, 4], [4, 5],\n    ],\n    type: PatternStyle.Spaceship\n  },\n}\n","import * as React from 'react';\nimport { ButtonGroup, Flex, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, FormLabel, Tooltip, IconButton, FormControl, Select } from \"@chakra-ui/core\";\nimport { MdPause, MdPlayArrow, MdRefresh, MdClear, MdTouchApp } from \"react-icons/md\";\nimport { patterns, GamePattern } from \"./game/patterns\";\n\nexport enum GameState {\n  Initial = \"initial\",\n  Selecting = \"selecting\",\n  Playing = \"playing\",\n}\n\nexport interface IGameControlsProps {\n  changeInterval: (val: number) => void;\n  changeState: (state: GameState) => void;\n  clear: () => void;\n  hasAliveCells: boolean;\n  interval: number;\n  pattern: string;\n  random: () => void;\n  selectPattern?: (id: string, pattern: GamePattern) => void;\n  state: GameState;\n}\n\nexport default function GameControls(props: IGameControlsProps) {\n  const isSelecting = props.state === GameState.Selecting;\n  const isInitial = isSelecting || props.state === GameState.Initial;\n  const playing = props.state === GameState.Playing;\n  const playLabel = playing ? \"Pause\" : (isInitial ? \"Start\" : \"Continue\");\n\n  return (\n    <Flex className=\"controls\" justify=\"center\" height=\"110px\">\n      <Flex direction=\"column\" justify=\"center\">\n        <ButtonGroup mt={3} mb={2}>\n          <Tooltip hasArrow aria-label={playLabel} label={playLabel + \" game\"} placement=\"bottom\" zIndex={2}>\n            <IconButton aria-label={playLabel}\n              icon={playing ? MdPause : MdPlayArrow}\n              isDisabled={!props.hasAliveCells}\n              onClick={() => {\n                props.changeState(\n                  props.state === GameState.Playing ? GameState.Initial : GameState.Playing\n                );\n              }}\n              variantColor=\"teal\" />\n          </Tooltip>\n          <Tooltip hasArrow aria-label=\"Select\" label=\"Select random cells\" placement=\"bottom\" zIndex={2}>\n            <IconButton aria-label=\"Select\"\n              className={isSelecting ? \"checked-button\" : \"unchecked-button\"}\n              icon={MdTouchApp}\n              isDisabled={!isInitial}\n              ml={3}\n              onClick={() => {\n                props.changeState(isSelecting ? GameState.Initial : GameState.Selecting);\n              }}\n              variantColor=\"teal\" />\n          </Tooltip>\n          <Tooltip hasArrow aria-label=\"Random\" label=\"Select random cells\" placement=\"bottom\" zIndex={2}>\n            <IconButton aria-label=\"Random\"\n              icon={MdRefresh}\n              isDisabled={!isInitial}\n              ml={3}\n              onClick={props.random}\n              variantColor=\"teal\" />\n          </Tooltip>\n          <Tooltip hasArrow aria-label=\"Clear\" label=\"Clear all cells\" placement=\"bottom\" zIndex={2}>\n            <IconButton aria-label=\"Clear\"\n              icon={MdClear}\n              isDisabled={!isInitial || !props.hasAliveCells}\n              ml={3}\n              onClick={props.clear}\n              variantColor=\"teal\" />\n          </Tooltip>\n        </ButtonGroup>\n        <Flex>\n          <FormLabel mt={2} htmlFor=\"interval\" isDisabled={playing}>Refresh ms:</FormLabel>\n          <NumberInput id=\"interval\"\n            isDisabled={playing}\n            max={10000}\n            mb=\"7px\"\n            min={100}\n            onChange={(val) => {\n              props.changeInterval(Number(val));\n            }}\n            step={100}\n            value={props.interval}\n            w={100}>\n            <NumberInputField />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </Flex>\n      </Flex>\n      <FormControl ml={4} mt={4} isDisabled={!isInitial}>\n        <FormLabel htmlFor=\"pattern\">Preselected patterns</FormLabel>\n        <Select id=\"pattern\"\n          placeholder=\"Select pattern\"\n          onChange={(e) => {\n            const value = e.target?.value;\n            if (value && props.selectPattern) {\n              props.selectPattern(value, patterns[value]);\n            }\n          }}\n          value={props.pattern}\n          >\n          {Object.entries(patterns).map(([key, pattern]) =>\n            (<option key={key} value={key}>\n              {pattern.type + \" - \" + (pattern.name || key)}\n            </option>)\n          )}\n        </Select>\n      </FormControl>\n    </Flex>\n  );\n}\n","import React, { useCallback, useLayoutEffect, useRef } from \"react\";\nimport BoardCell, { CELL_WIDTH } from './BoardCell';\nimport { CellIndex } from \"./game/CellIndex\";\nimport { GameState } from \"./GameControls\";\n\nexport interface IBoardProps {\n  alive: CellIndex[];\n  columns?: number;\n  rows?: number;\n  setDimensions: (dimensions: Dimensions) => void;\n  select: (index: CellIndex) => void;\n  state: GameState;\n}\n\nexport interface Dimensions {\n  columns: number;\n  rows: number;\n}\n\nexport default function Board(props: IBoardProps) {\n  const targetRef = useRef<HTMLDivElement>(null);\n  const {state, select, setDimensions} = props;\n\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (state === GameState.Selecting) {\n        const x = e.nativeEvent.offsetX;\n        const y = e.nativeEvent.offsetY;\n        const index = {\n          column: Math.floor((x - 11) / CELL_WIDTH),\n          row: Math.floor((y - 1) / CELL_WIDTH),\n        };\n        select(index);\n      }\n    }, [select, state]);\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      const width = targetRef.current!.offsetWidth;\n      const height = targetRef.current!.offsetHeight;\n      // Leave padding \n      const columns = Math.floor((width - 20) / CELL_WIDTH);\n      const rows = Math.floor((height - 20) / CELL_WIDTH);\n      setDimensions({columns, rows});\n    }\n  }, [setDimensions]);\n\n  let className = \"board\";\n  let columnBorders = [];\n  let rowBorders = [];\n  if (props.state === GameState.Selecting && props.columns && props.rows) {\n    className += \" grid\"\n    for (let col = 1; col < props.columns; col++) {\n      columnBorders.push(<div className=\"column\" key={col} style={{left: 10 + CELL_WIDTH * col}}/>)\n    }\n    for (let row = 1; row < props.rows; row++) {\n      rowBorders.push(<div className=\"row\" key={row} style={{top: CELL_WIDTH * row}}/>)\n    }\n  }\n  return (\n    <div className={className} onClick={handleClick} ref={targetRef}>\n      {props.alive.map((cell, index) => {\n        return <BoardCell key={index} column={cell.column} row={cell.row} />\n      })}\n      {columnBorders}\n      {rowBorders}\n    </div>\n  );\n}\n","import { CellIndex } from './CellIndex';\n\nexport enum CellState {\n  Alive,\n  Dead,\n}\n\nexport class Cell {\n  private _state?: CellState;\n  private _next?: CellState;\n  \n  constructor(readonly index: CellIndex) {}\n\n  get state() {\n    return this._state;\n  }\n\n  set next(value: CellState) {\n    this._next = value;\n  }\n\n  public cycle() {\n    this._state = this._next;\n  }\n}\n","import { Cell, CellState } from \"./Cell\";\nimport { CellIndex } from './CellIndex';\nimport { GamePattern, dimensions, PatternStyle } from \"./patterns\";\n\nexport class Game {\n  private _grid: Cell[];\n\n  /**\n   * Initialize the Conway's game of life\n   * @param rows Number of rows in the grid\n   * @param columns Number of columns in the grid\n   * @param chanceToLive Chance to live in the beginning (default 0.05 i.e. 5%)\n   */\n  constructor(\n    readonly rows: number,\n    readonly columns: number,\n    readonly chanceToLive: number = 0.05,\n    initGrid: boolean = true\n  ) {\n    this._grid = new Array(rows * columns);\n    if (initGrid) {\n      this.init();\n    } else {\n      this.initEmpty();\n    }\n  }\n\n  public alive = () => {\n    return this._grid\n      .filter((cell) => cell.state === CellState.Alive)\n      .map((cell) => cell.index);\n  };\n\n  public clear = () => {\n    this._grid.forEach(cell => {\n      cell.next = CellState.Dead;\n      cell.cycle();\n    });\n  }\n\n  get grid() {\n    return this._grid;\n  }\n\n  public random = () => {\n    this._grid.forEach(cell => {\n      cell.next = this.randomState();\n      cell.cycle();\n    });\n\n    return this.alive();\n  }\n\n  public select = (index: CellIndex) => {\n    const cell = this.getCell(index);\n    if (cell) {\n      cell.next = cell.state === CellState.Alive ? CellState.Dead : CellState.Alive;\n      cell.cycle();\n    }\n  };\n\n  public selectPattern = (pattern: GamePattern) => {\n    const [rows, columns] = dimensions(pattern.pattern)\n\n    // Skip empty pattern\n    if (rows >= 0 && columns >= 0) {\n      const startRow = Math.floor((this.rows - rows) / 2);\n      const startColumn = pattern.type === PatternStyle.Spaceship? 1 : Math.floor((this.columns - columns) / 2);\n\n      this.clear();\n      pattern.pattern.forEach(index => {\n        const cell = this.getCell({row: startRow + index[0], column: startColumn + index[1]});\n        if (cell) {\n          cell.next = CellState.Alive;\n          cell.cycle()\n        }\n      });\n    }\n  }\n\n  public step = () => {\n    this._grid.forEach((cell) => this.calcNext(cell));\n    this._grid.forEach((cell) => cell.cycle());\n  };\n\n\n  private calcNext = (cell: Cell) => {\n    const index = cell.index;\n    const neighbors = [\n      { row: index.row - 1, column: index.column - 1 },\n      { row: index.row - 1, column: index.column },\n      { row: index.row - 1, column: index.column + 1 },\n      { row: index.row, column: index.column - 1 },\n      { row: index.row, column: index.column + 1 },\n      { row: index.row + 1, column: index.column - 1 },\n      { row: index.row + 1, column: index.column },\n      { row: index.row + 1, column: index.column + 1 },\n    ]\n    .map((neighbor) => this.getCell(neighbor))\n    .filter((cell) => !!cell)\n    .filter((cell) => cell!.state === CellState.Alive);\n\n    const aliveNeighbors = neighbors.length;\n    if (cell.state === CellState.Alive) {\n      cell.next = (aliveNeighbors === 2 || aliveNeighbors === 3) ? CellState.Alive : CellState.Dead;\n    } else {\n      cell.next = aliveNeighbors === 3 ? CellState.Alive : CellState.Dead;\n    }\n  };\n\n  private getCell = (index: CellIndex) => {\n    if (this.isValidIndex(index)) {\n      return this._grid[index.row * this.columns + index.column];\n    }\n\n    return null;\n  }\n\n  private init = () => {\n    let i = 0;\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++, i++) {\n        const cell = new Cell({ row, column });\n        cell.next = this.randomState();\n        cell.cycle();\n        this._grid[i] = cell;\n      }\n    }\n  };\n\n  private initEmpty = () => {\n    let i = 0;\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++, i++) {\n        const cell = new Cell({ row, column });\n        cell.next = CellState.Dead;\n        cell.cycle();\n        this._grid[i] = cell;\n      }\n    }\n  }\n\n  private isValidIndex = (index: CellIndex) => {\n    return index.row >= 0 && index.row < this.rows && index.column >= 0 && index.column < this.columns;\n  }\n\n  private randomState() {\n    return Math.random() < this.chanceToLive ? CellState.Alive : CellState.Dead;\n  }\n}\n","import React, { useRef, useCallback, useEffect } from 'react';\nimport './App.css';\nimport Board, { Dimensions } from \"./Board\";\nimport { theme, ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport GameControls, { GameState } from \"./GameControls\";\nimport { useState } from 'react';\nimport { Game } from \"./game/Game\";\nimport { CellIndex } from \"./game/CellIndex\";\n\n// Let's say you want to add custom colors\nconst customTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    brand: {\n      900: \"#1a365d\",\n      800: \"#153e75\",\n      700: \"#2a69ac\",\n    },\n  },\n};\n\n\nfunction App() {\n  const [alive, setAlive] = useState<CellIndex[]>([]);\n  const [interval, setInterval] = useState(1000);\n  const [pattern, setPattern] = useState<string>(\"\");\n  const [state, setState] = useState(GameState.Initial);\n  const game = useRef<Game | null>(null);\n  const initGame = useCallback(\n    (dimensions: Dimensions) => {\n      if (!game.current || game.current.rows !== dimensions.rows || game.current.columns !== dimensions.columns) {\n        game.current = new Game(dimensions.rows, dimensions.columns);\n        setAlive(game.current.alive());\n      }\n    },\n    [],\n  );\n  const select = useCallback(\n    (index: CellIndex) => {\n      if (game.current) {\n        // Ignore clicks outside of selected area\n        if (index.column >= 0 && index.column < game.current.columns &&\n          index.row >= 0 && index.row < game.current.rows) {\n          game.current.select(index);\n        }\n        setAlive(game.current.alive());\n      }\n    }, []);\n    const random = useCallback(\n    () => {\n      if (game.current) {\n        setAlive(game.current.random());\n      }\n    }, []);\n  \n  useEffect(() => {\n    let intervalId: number | null = null;\n    if (state === GameState.Playing && !intervalId) {\n      intervalId = window.setInterval(() => {\n        game.current?.step();\n        const nextState = game.current!.alive();\n        setAlive(nextState);\n        if (nextState.length === 0) {\n          setState(GameState.Initial);\n        }\n      }, interval);\n    }\n    if (state === GameState.Initial && intervalId) {\n      window.clearInterval(intervalId);\n      intervalId = null;\n    }\n\n    return () => {\n      if (!!intervalId) {\n        window.clearInterval(intervalId);\n        intervalId = null;\n      }\n    };\n  }, [interval, state])\n\n\n  return (\n    <ThemeProvider theme={customTheme}>\n      <CSSReset />\n      <GameControls\n        changeInterval={setInterval}\n        changeState={setState}\n        clear={() => {\n          if (game.current) {\n            game.current.clear();\n            setAlive([]);\n            setPattern(\"\");\n          }\n        }}\n        hasAliveCells={alive.length > 0}\n        interval={interval}\n        pattern={pattern}\n        random={random}\n        selectPattern={(id, pattern) => {\n          if (game.current) {\n            game.current.selectPattern(pattern);\n            setAlive(game.current.alive());\n            setPattern(id);\n          }\n          \n        }}\n        state={state} />\n      <Board\n        alive={alive}\n        columns={game.current?.columns}\n        rows={game.current?.rows}\n        select={select}\n        setDimensions={initGame}\n        state={state} />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}